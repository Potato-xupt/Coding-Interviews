package question68;

import commons.TreeNode;
/**
 * 树中两个节点的最低公共祖先(二叉搜索树)
 * 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
 * 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
 * 
 * 解题思路：
 * 二叉查找树性质，两个节点 p, q 的公共祖先 root 满足 root.val >= p.val && root.val <= q.val。
 * @author Potato
 *
 */
public class LowestCommonAncestorByBinarySortTree {
	public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		/**
		 * 如果为空则返回
		 */
		if(root == null ) {
			return root;
		}
		/**
		 * 当前节点比 p、q都大，要找小的，就从左子树中找
		 */
		if(root.val > p.val && root.val > q.val) {
			return lowestCommonAncestor(root.left, p, q);
		}
		/**
		 * 当前节点比 p、q都小，要找大的，就从右子树中找
		 */
		if(root.val < p.val && root.val < q.val) {
			return lowestCommonAncestor(root.right, p, q);
		}
		return root;
	}

}
