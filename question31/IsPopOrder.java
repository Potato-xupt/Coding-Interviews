package question31;

import java.util.Stack;
/**
 * 栈的压入、弹出序列
 * 题目描述
 * 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
 * 假设压入栈的所有数字均不相等。
 * 例如序列1,2,3,4,5是某栈的压入顺序，
 * 序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。
 * （注意：这两个序列的长度是相等的）
 * 
 * 解题思路：
 * 使用一个辅助栈，将入栈顺序数组的值放入栈中，当遇到出栈顺序数组的值时，栈顶元素出栈，出栈顺序数组坐标后移，继续对比。直到入栈顺序数组的值放完，判断辅助栈是否为空即可。
 * 举例：
 * 入栈1,2,3,4,5
 * 出栈4,5,3,2,1
 * 遍历压栈顺序，先将第一个放入栈中，这里是1，然后判断栈顶元素是不是出栈顺序的第一个元素，这里是4，很显然1≠4，所以我们继续压栈，直到相等以后开始出栈，出栈一个元素，则将出栈顺序向后移动一位，直到不相等，这样循环等压栈顺序遍历完成，如果辅助栈还不为空，说明弹出序列不是该栈的弹出顺序。
 * 首先1入辅助栈，此时栈顶1≠4，继续入栈2
 * 此时栈顶2≠4，继续入栈3
 * 此时栈顶3≠4，继续入栈4
 * 此时栈顶4＝4，出栈4，弹出序列的位置向后移一位，此时为5，,辅助栈里面是1,2,3
 * 此时栈顶3≠5，继续入栈5
 * 此时栈顶5=5，出栈5,弹出序列向后一位，此时为3，,辅助栈里面是1,2,3
 * ...
 * 依次执行，最后辅助栈为空。如果不为空说明弹出序列不是该栈的弹出顺序
 * @author Potato
 *
 */
@SuppressWarnings("all")
public class IsPopOrder {

    public boolean IsPopOrder(int [] pushA,int [] popA) {
    	/**
    	 * 判断边界条件，如果两个数组的长度不等，则一定不匹配
    	 */
    	if(pushA == null || popA == null || pushA.length <= 0 || popA.length <= 0 || pushA.length != popA.length ) {
    		return false;
    	}
    	Stack<Integer> stack = new Stack<>();
    	/**
    	 * i遍历入栈数组，j代表出栈数组的下标
    	 */
    	for (int i = 0, j = 0; i < pushA.length; i++) {
			stack.push(pushA[i]);
			/**
			 * 当遇到辅助栈栈顶元素和出栈数组下标相等时，开始对比。
			 * 辅助栈栈顶元素出栈，出栈数组下标后移。直到不相等为止。
			 */
			while(!stack.isEmpty() && stack.peek() == popA[j]) {
				stack.pop();
				j++;
			}
		}
    	/**
    	 * 最后判断辅助栈是否为空即可
    	 */
    	return stack.isEmpty();
    }
}
